#!/usr/bin/env node

/**
 * Module dependencies.
 */

var mongo  = require('../lib/mongo.js');
var config = require('../config.json');
var app    = require('../app');
var debug  = require('debug')('analogist:server');
var http   = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || config.PORT || '3000');
app.set('port', port);

/**
 * Build mongo URL from config or env and store in Express
 */

var mongoAddress = process.env.MONGODB_PORT_27017_TCP_ADDR || config.MONGO.ADDRESS;
var mongoPort    = process.env.MONGODB_PORT_27017_TCP_PORT || config.MONGO.PORT;

app.locals.mongoUrl = 'mongodb://' + mongoAddress + ':' + mongoPort + '/' + config.MONGO.DB;

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

var i = 1;
(function start() {
  mongo.connect(app.locals.mongoUrl, function (err) {
    if (err) {
      console.error('Failed to connect to mongo (attempt %d/20)', i);

      if (i++ < 20) { return setTimeout(start, 5000); }

      console.error('Can not connect to %s, aborting...', config.MONGO_URL);
      process.exit(1);
    }

    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
  });
})();

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('Listening on %s', bind);
}

function shutdown() {
  console.log('\nGot a signal, shutting down...');
  process.exit(1);
}
process.on('SIGTERM', shutdown);
process.on('SIGINT', shutdown);
