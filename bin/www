#!/usr/bin/env node
/* eslint no-console: 0, global-require: 0 */
'use strict';

/**
 * Module dependencies.
 */

let mongo  = require('../lib/mongo.js');
let config = require('../lib/config.js');
let http   = require('http');
let server;

/**
 * Get port from environment and store in Express.
 */
let port = normalizePort(process.env.PORT || config.PORT || '3000');

/**
 * Build mongo URL from config or env and store in Express
 */
let mongoAddress = process.env.MONGODB_PORT_27017_TCP_ADDR || config.MONGO.ADDRESS;
let mongoPort    = process.env.MONGODB_PORT_27017_TCP_PORT || config.MONGO.PORT;
let mongoUrl     = `mongodb://${mongoAddress}:${mongoPort}/${config.MONGO.DB}`;

/**
 * Open a mongodb connection
 */
let i = 1;
(function start() {
  mongo.connect(mongoUrl, (err) => {
    if (err) {
      console.error('Failed to connect to mongo (attempt %d/20)', i);

      if (i++ < 20) { return setTimeout(start, 5000); }

      console.error('Can not connect to %s, aborting...', config.MONGO_URL);
      process.exit(1);
    }

    let app = require('../app');
    app.set('port', port);

    // Create HTTP server.
    server = http.createServer(app);

    // Listen on provided port, on all network interfaces.
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
  });
})();

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string'
    ? `Pipe ${port}`
    : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
  case 'EACCES':
    console.error(`${bind} requires elevated privileges`);
    process.exit(1);
    break;
  case 'EADDRINUSE':
    console.error(`${bind} is already in use`);
    process.exit(1);
    break;
  default:
    throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  let addr = server.address();
  let bind = typeof addr === 'string'
    ? `pipe ${addr}`
    : `port ${addr.port}`;
  console.log('Listening on %s', bind);
}

function shutdown() {
  console.log('\nGot a signal, shutting down...');
  process.exit(1);
}
process.on('SIGTERM', shutdown);
process.on('SIGINT', shutdown);
